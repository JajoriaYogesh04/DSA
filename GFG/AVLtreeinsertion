

//User function Template for Java

/*
class Node
{
    int data;
    Node left;
    Node right;
    int height;
};
*/
class Solution
{
    public int getHeight(Node root){
        if(root==null)return 0;
        return root.height;
    }
    public int getBalanceFactor(Node root){
        if(root==null)return 0;
        return getHeight(root.left)-getHeight(root.right);
    }
    public Node rightRotate(Node x){
        Node y=x.left;
        Node t1=y.right;
        y.right=x;
        x.left=t1;
        x.height=Math.max(getHeight(x.left),getHeight(x.right))+1;
        y.height=Math.max(getHeight(y.left),getHeight(y.right))+1;
        return y;
    }
    public Node leftRotate(Node x){
        Node y=x.right;
        Node t1=y.left;
        y.left=x;
        x.right=t1;
        x.height=Math.max(getHeight(x.left),getHeight(x.right))+1;
        y.height=Math.max(getHeight(y.left),getHeight(y.right))+1;
        return y;
    }
    public  Node insertToAVL(Node root,int data)
    {
        //code here
        if(root==null)return new Node(data);
        if(data<root.data)root.left=insertToAVL(root.left,data);
        else if(data>root.data)root.right=insertToAVL(root.right,data);
        else return root;
        root.height=Math.max(getHeight(root.left),getHeight(root.right))+1;
        int bf=getBalanceFactor(root);
        if(bf>1&&data<root.left.data)return rightRotate(root);
        if(bf<-1&&root.right.data<data)return leftRotate(root);
        if(bf>1&&root.left.data<data){
            root.left=leftRotate(root.left);
            return rightRotate(root);
        }
        if(bf<-1&&data<root.right.data){
            root.right=rightRotate(root.right);
            return leftRotate(root);
        }
        return root;
    }
}    