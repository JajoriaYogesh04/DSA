// public class Solution {
//     public static double median(int[] a, int[] b) {
//     	// Write your code here.
//         int n1=a.length;
//         int n2=b.length;
//         int merge[]=new int[n1+n2];
//         int i=0;
//         int j=0;
//         int k=0;
//         while(i<n1&&j<n2){
//             if(a[i]<=b[j]){
//                 merge[k]=a[i];
//                 i++;
//                 k++;
//             }
//             else{
//                 merge[k]=b[j];
//                 j++;
//                 k++;
//             }
//         }
//         while(i<n1){
//             merge[k]=a[i];
//             i++;
//             k++;
//         }
//         while(j<n2){
//             merge[k]=b[j];
//             j++;
//             k++;
//         }
//         int mid=(n1+n2)/2;
//         if((n1+n2)%2==0){
//             return (double)(merge[mid-1]+merge[mid])/2;
//         }
//         else{
//             return (double)(merge[mid]);
//         }
//     }
// }


// public class Solution {
//     public static double median(int[] a, int[] b) {
//     	// Write your code here.
//         int n1=a.length;
//         int n2=b.length;
//         int idx2=(n1+n2)/2;
//         int idx1=idx2-1;
//         int i=0;
//         int j=0;
//         int count=0;
//         int el1=-1;
//         int el2=-1;
//         while(i<n1&&j<n2){
//             if(a[i]<=b[j]){
//                 if(count==idx1)el1=a[i];
//                 if(count==idx2)el2=a[i];
//                 count++;
//                 i++;
//             }
//             else{
//                 if(count==idx1)el1=b[j];
//                 if(count==idx2)el2=b[j];
//                 count++;
//                 j++;
//             }
//         }
//         while(i<n1){
//             if(count==idx1)el1=a[i];
//             if(count==idx2)el2=a[i];
//             count++;
//             i++;
//         }
//         while(j<n2){
//             if(count==idx1)el1=b[j];
//             if(count==idx2)el2=b[j];
//             j++;
//             count++;
//         }
//         if((n1+n2)%2==0){
//             return (double)(el1+el2)/2;
//         }
//         else{
//             return (double)el2;
//         }
//     }
// }



public class Solution {
    public static double median(int[] a, int[] b) {
    	// Write your code here.
        int n1=a.length;
        int n2=b.length;
        if(n1>n2)return median(b,a);
        int n=n1+n2;
        int left=(n+1)/2;
        int si=0;
        int ei=n1;
        while(si<=ei){
            int mi1=si+(ei-si)/2;
            int mi2=left-mi1;
            int r1=mi1<n1?a[mi1]:Integer.MAX_VALUE;
            int r2=mi2<n2?b[mi2]:Integer.MAX_VALUE;
            int l1=(mi1>0)?a[mi1-1]:Integer.MIN_VALUE;
            int l2=(mi2>0)?b[mi2-1]:Integer.MIN_VALUE;
            if(l1<=r2&&l2<=r1){
                if(n%2==1){
                    return Math.max(l1,l2);
                }
                else{
                    return (double)(Math.max(l1,l2)+Math.min(r1,r2))/2.0;
                }
            }
            else if(l1>r2)ei=mi1-1;
            else si=mi1+1;
        }
        return 0;
    }
}