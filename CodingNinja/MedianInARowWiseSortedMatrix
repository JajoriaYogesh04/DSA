public final class Solution {
    public static int upperBound(int arr[],int n,int target){
        int si=0;
        int ei=n-1;
        while(si<=ei){
            int mi=si+(ei-si)/2;
            if(arr[mi]<=target)si=mi+1;
            else ei=mi-1;
        }
        return si;
    }
    public static int countSmallEqual(int matrix[][],int m,int n,int mid){
        int count=0;
        for(int i=0;i<m;i++){
            count+=upperBound(matrix[i],n,mid);
        }
        return count;
    }
    public static int findMedian(int matrix[][], int m, int n) {
        // Write your code here
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<m;i++){
            if(matrix[i][0]<min)min=matrix[i][0];
            if(matrix[i][n-1]>max)max=matrix[i][n-1];
        }
        int req=(n*m)/2;
        while(min<=max){
            int mid=min+(max-min)/2;
            int smallcount=countSmallEqual(matrix,m,n,mid);
            if(smallcount<=req)min=mid+1;
            else max=mid-1;
        }
        return min;
    }
}